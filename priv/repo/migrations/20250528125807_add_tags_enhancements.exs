defmodule Wedid.Repo.Migrations.AddTagsEnhancements do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:tags, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :icon, :text
      add :color, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :couple_id,
          references(:couples,
            column: :id,
            name: "tags_couple_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:entry_tags, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :role, :text

      add :entry_id,
          references(:entries,
            column: :id,
            name: "entry_tags_entry_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :tag_id,
          references(:tags,
            column: :id,
            name: "entry_tags_tag_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:entry_tags, [:entry_id, :role],
             name: "entry_tags_unique_main_tag_for_entry_index",
             where: "(role = 'main')"
           )
  end

  def down do
    drop_if_exists unique_index(:entry_tags, [:entry_id, :role],
                     name: "entry_tags_unique_main_tag_for_entry_index"
                   )

    drop constraint(:entry_tags, "entry_tags_entry_id_fkey")

    drop constraint(:entry_tags, "entry_tags_tag_id_fkey")

    drop table(:entry_tags)

    drop constraint(:tags, "tags_couple_id_fkey")

    drop table(:tags)
  end
end
