name: WeDid CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:17.4
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wedid_test
        # Expose the port to the host
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
      - name: Restore dependencies cache
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: mix deps.get
      - name: Compile
        run: mix compile --warnings-as-errors
      - name: Run tests
        run: mix test --max-failures 1 --trace --warnings-as-errors
        env:
          MIX_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
  build-push:
    runs-on: ubuntu-latest
    needs: build
    name: Build Docker image & push to ghcr.io
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/kioopi/wedid
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr
            type=sha,format=short

      - name: Parse versions from .tool-versions
        id: parse-asdf
        run: ./scripts/versions.sh

      - uses: docker/setup-buildx-action@v3

      - uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=registry,ref=ghcr.io/kioopi/wedid:cache
          cache-to: type=registry,ref=ghcr.io/kioopi/wedid:cache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          build-args: |
            ELIXIR_VERSION=${{ env.ELIXIR_VERSION }}
            OTP_VERSION=${{ env.ERLANG_VERSION }}
  deploy:
    name: Deploy to Production
    needs: build-push
    runs-on: ubuntu-latest
    # This makes the job manual - it will only run when triggered manually
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.HETZNER_PRIVATE_KEY }}

      - name: Setup known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.HETZNER_HOST_IP }} >> ~/.ssh/known_hosts

      - name: Copy docker-compose file
        run: scp compose.yml ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST_IP }}:~/wedid/

      - name: Copy deploy script
        run: scp scripts/deploy.sh ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST_IP }}:~/wedid/

      - name: Deploy to server
        run: |
          ssh ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST_IP }} "cd ~/wedid && \
          export WEB_IMAGE=ghcr.io/kioopi/wedid:latest && \
          export SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }} && \
          export PHX_HOST=${{ secrets.PHX_HOST }} && \
          export GHCR_PAT=${{ secrets.GH_PAT }} && \
          export TOKEN_SIGNING_SECRET=${{ secrets.TOKEN_SIGNING_SECRET }} && \
          ./deploy.sh"
